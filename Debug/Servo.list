
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd4  08003bd4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bd4  08003bd4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bd4  08003bd4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000007c  08003c58  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003c58  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086eb  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e7  00000000  00000000  000287d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d3  00000000  00000000  0002aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b80  00000000  00000000  0002b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b829  00000000  00000000  00042e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087e31  00000000  00000000  0004e674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000306c  00000000  00000000  000d64a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  000d9514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b3c 	.word	0x08003b3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003b3c 	.word	0x08003b3c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2f>:
 8000728:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800072c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000730:	bf24      	itt	cs
 8000732:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000736:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073a:	d90d      	bls.n	8000758 <__aeabi_d2f+0x30>
 800073c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000740:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000744:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000748:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800074c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000750:	bf08      	it	eq
 8000752:	f020 0001 	biceq.w	r0, r0, #1
 8000756:	4770      	bx	lr
 8000758:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800075c:	d121      	bne.n	80007a2 <__aeabi_d2f+0x7a>
 800075e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000762:	bfbc      	itt	lt
 8000764:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000768:	4770      	bxlt	lr
 800076a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800076e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000772:	f1c2 0218 	rsb	r2, r2, #24
 8000776:	f1c2 0c20 	rsb	ip, r2, #32
 800077a:	fa10 f30c 	lsls.w	r3, r0, ip
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	bf18      	it	ne
 8000784:	f040 0001 	orrne.w	r0, r0, #1
 8000788:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800078c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000790:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000794:	ea40 000c 	orr.w	r0, r0, ip
 8000798:	fa23 f302 	lsr.w	r3, r3, r2
 800079c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a0:	e7cc      	b.n	800073c <__aeabi_d2f+0x14>
 80007a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007a6:	d107      	bne.n	80007b8 <__aeabi_d2f+0x90>
 80007a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007ac:	bf1e      	ittt	ne
 80007ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007b6:	4770      	bxne	lr
 80007b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <__aeabi_frsub>:
 80007c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007cc:	e002      	b.n	80007d4 <__addsf3>
 80007ce:	bf00      	nop

080007d0 <__aeabi_fsub>:
 80007d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007d4 <__addsf3>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	bf1f      	itttt	ne
 80007d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007dc:	ea92 0f03 	teqne	r2, r3
 80007e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007e8:	d06a      	beq.n	80008c0 <__addsf3+0xec>
 80007ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f2:	bfc1      	itttt	gt
 80007f4:	18d2      	addgt	r2, r2, r3
 80007f6:	4041      	eorgt	r1, r0
 80007f8:	4048      	eorgt	r0, r1
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	bfb8      	it	lt
 80007fe:	425b      	neglt	r3, r3
 8000800:	2b19      	cmp	r3, #25
 8000802:	bf88      	it	hi
 8000804:	4770      	bxhi	lr
 8000806:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800080a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800080e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000812:	bf18      	it	ne
 8000814:	4240      	negne	r0, r0
 8000816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800081e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000822:	bf18      	it	ne
 8000824:	4249      	negne	r1, r1
 8000826:	ea92 0f03 	teq	r2, r3
 800082a:	d03f      	beq.n	80008ac <__addsf3+0xd8>
 800082c:	f1a2 0201 	sub.w	r2, r2, #1
 8000830:	fa41 fc03 	asr.w	ip, r1, r3
 8000834:	eb10 000c 	adds.w	r0, r0, ip
 8000838:	f1c3 0320 	rsb	r3, r3, #32
 800083c:	fa01 f103 	lsl.w	r1, r1, r3
 8000840:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000844:	d502      	bpl.n	800084c <__addsf3+0x78>
 8000846:	4249      	negs	r1, r1
 8000848:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800084c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000850:	d313      	bcc.n	800087a <__addsf3+0xa6>
 8000852:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000856:	d306      	bcc.n	8000866 <__addsf3+0x92>
 8000858:	0840      	lsrs	r0, r0, #1
 800085a:	ea4f 0131 	mov.w	r1, r1, rrx
 800085e:	f102 0201 	add.w	r2, r2, #1
 8000862:	2afe      	cmp	r2, #254	; 0xfe
 8000864:	d251      	bcs.n	800090a <__addsf3+0x136>
 8000866:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800086a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800086e:	bf08      	it	eq
 8000870:	f020 0001 	biceq.w	r0, r0, #1
 8000874:	ea40 0003 	orr.w	r0, r0, r3
 8000878:	4770      	bx	lr
 800087a:	0049      	lsls	r1, r1, #1
 800087c:	eb40 0000 	adc.w	r0, r0, r0
 8000880:	3a01      	subs	r2, #1
 8000882:	bf28      	it	cs
 8000884:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000888:	d2ed      	bcs.n	8000866 <__addsf3+0x92>
 800088a:	fab0 fc80 	clz	ip, r0
 800088e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000892:	ebb2 020c 	subs.w	r2, r2, ip
 8000896:	fa00 f00c 	lsl.w	r0, r0, ip
 800089a:	bfaa      	itet	ge
 800089c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a0:	4252      	neglt	r2, r2
 80008a2:	4318      	orrge	r0, r3
 80008a4:	bfbc      	itt	lt
 80008a6:	40d0      	lsrlt	r0, r2
 80008a8:	4318      	orrlt	r0, r3
 80008aa:	4770      	bx	lr
 80008ac:	f092 0f00 	teq	r2, #0
 80008b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008b4:	bf06      	itte	eq
 80008b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ba:	3201      	addeq	r2, #1
 80008bc:	3b01      	subne	r3, #1
 80008be:	e7b5      	b.n	800082c <__addsf3+0x58>
 80008c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008c8:	bf18      	it	ne
 80008ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ce:	d021      	beq.n	8000914 <__addsf3+0x140>
 80008d0:	ea92 0f03 	teq	r2, r3
 80008d4:	d004      	beq.n	80008e0 <__addsf3+0x10c>
 80008d6:	f092 0f00 	teq	r2, #0
 80008da:	bf08      	it	eq
 80008dc:	4608      	moveq	r0, r1
 80008de:	4770      	bx	lr
 80008e0:	ea90 0f01 	teq	r0, r1
 80008e4:	bf1c      	itt	ne
 80008e6:	2000      	movne	r0, #0
 80008e8:	4770      	bxne	lr
 80008ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008ee:	d104      	bne.n	80008fa <__addsf3+0x126>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	bf28      	it	cs
 80008f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	4770      	bx	lr
 80008fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008fe:	bf3c      	itt	cc
 8000900:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000904:	4770      	bxcc	lr
 8000906:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800090a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000912:	4770      	bx	lr
 8000914:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000918:	bf16      	itet	ne
 800091a:	4608      	movne	r0, r1
 800091c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000920:	4601      	movne	r1, r0
 8000922:	0242      	lsls	r2, r0, #9
 8000924:	bf06      	itte	eq
 8000926:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092a:	ea90 0f01 	teqeq	r0, r1
 800092e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000932:	4770      	bx	lr

08000934 <__aeabi_ui2f>:
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	e004      	b.n	8000944 <__aeabi_i2f+0x8>
 800093a:	bf00      	nop

0800093c <__aeabi_i2f>:
 800093c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000940:	bf48      	it	mi
 8000942:	4240      	negmi	r0, r0
 8000944:	ea5f 0c00 	movs.w	ip, r0
 8000948:	bf08      	it	eq
 800094a:	4770      	bxeq	lr
 800094c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000950:	4601      	mov	r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	e01c      	b.n	8000992 <__aeabi_l2f+0x2a>

08000958 <__aeabi_ul2f>:
 8000958:	ea50 0201 	orrs.w	r2, r0, r1
 800095c:	bf08      	it	eq
 800095e:	4770      	bxeq	lr
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e00a      	b.n	800097c <__aeabi_l2f+0x14>
 8000966:	bf00      	nop

08000968 <__aeabi_l2f>:
 8000968:	ea50 0201 	orrs.w	r2, r0, r1
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000974:	d502      	bpl.n	800097c <__aeabi_l2f+0x14>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	ea5f 0c01 	movs.w	ip, r1
 8000980:	bf02      	ittt	eq
 8000982:	4684      	moveq	ip, r0
 8000984:	4601      	moveq	r1, r0
 8000986:	2000      	moveq	r0, #0
 8000988:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800098c:	bf08      	it	eq
 800098e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000992:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000996:	fabc f28c 	clz	r2, ip
 800099a:	3a08      	subs	r2, #8
 800099c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a0:	db10      	blt.n	80009c4 <__aeabi_l2f+0x5c>
 80009a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80009a6:	4463      	add	r3, ip
 80009a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009b4:	fa20 f202 	lsr.w	r2, r0, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f102 0220 	add.w	r2, r2, #32
 80009c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009cc:	f1c2 0220 	rsb	r2, r2, #32
 80009d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d4:	fa21 f202 	lsr.w	r2, r1, r2
 80009d8:	eb43 0002 	adc.w	r0, r3, r2
 80009dc:	bf08      	it	eq
 80009de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fmul>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d06f      	beq.n	8000adc <__aeabi_fmul+0xf8>
 80009fc:	441a      	add	r2, r3
 80009fe:	ea80 0c01 	eor.w	ip, r0, r1
 8000a02:	0240      	lsls	r0, r0, #9
 8000a04:	bf18      	it	ne
 8000a06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a0a:	d01e      	beq.n	8000a4a <__aeabi_fmul+0x66>
 8000a0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a18:	fba0 3101 	umull	r3, r1, r0, r1
 8000a1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a24:	bf3e      	ittt	cc
 8000a26:	0049      	lslcc	r1, r1, #1
 8000a28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a2c:	005b      	lslcc	r3, r3, #1
 8000a2e:	ea40 0001 	orr.w	r0, r0, r1
 8000a32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a36:	2afd      	cmp	r2, #253	; 0xfd
 8000a38:	d81d      	bhi.n	8000a76 <__aeabi_fmul+0x92>
 8000a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	4770      	bx	lr
 8000a4a:	f090 0f00 	teq	r0, #0
 8000a4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a52:	bf08      	it	eq
 8000a54:	0249      	lsleq	r1, r1, #9
 8000a56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a5e:	3a7f      	subs	r2, #127	; 0x7f
 8000a60:	bfc2      	ittt	gt
 8000a62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6a:	4770      	bxgt	lr
 8000a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	3a01      	subs	r2, #1
 8000a76:	dc5d      	bgt.n	8000b34 <__aeabi_fmul+0x150>
 8000a78:	f112 0f19 	cmn.w	r2, #25
 8000a7c:	bfdc      	itt	le
 8000a7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a82:	4770      	bxle	lr
 8000a84:	f1c2 0200 	rsb	r2, r2, #0
 8000a88:	0041      	lsls	r1, r0, #1
 8000a8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a8e:	f1c2 0220 	rsb	r2, r2, #32
 8000a92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a9a:	f140 0000 	adc.w	r0, r0, #0
 8000a9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aa2:	bf08      	it	eq
 8000aa4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aa8:	4770      	bx	lr
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ab2:	bf02      	ittt	eq
 8000ab4:	0040      	lsleq	r0, r0, #1
 8000ab6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aba:	3a01      	subeq	r2, #1
 8000abc:	d0f9      	beq.n	8000ab2 <__aeabi_fmul+0xce>
 8000abe:	ea40 000c 	orr.w	r0, r0, ip
 8000ac2:	f093 0f00 	teq	r3, #0
 8000ac6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aca:	bf02      	ittt	eq
 8000acc:	0049      	lsleq	r1, r1, #1
 8000ace:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ad2:	3b01      	subeq	r3, #1
 8000ad4:	d0f9      	beq.n	8000aca <__aeabi_fmul+0xe6>
 8000ad6:	ea41 010c 	orr.w	r1, r1, ip
 8000ada:	e78f      	b.n	80009fc <__aeabi_fmul+0x18>
 8000adc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae0:	ea92 0f0c 	teq	r2, ip
 8000ae4:	bf18      	it	ne
 8000ae6:	ea93 0f0c 	teqne	r3, ip
 8000aea:	d00a      	beq.n	8000b02 <__aeabi_fmul+0x11e>
 8000aec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000af0:	bf18      	it	ne
 8000af2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000af6:	d1d8      	bne.n	8000aaa <__aeabi_fmul+0xc6>
 8000af8:	ea80 0001 	eor.w	r0, r0, r1
 8000afc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	4770      	bx	lr
 8000b02:	f090 0f00 	teq	r0, #0
 8000b06:	bf17      	itett	ne
 8000b08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b0c:	4608      	moveq	r0, r1
 8000b0e:	f091 0f00 	teqne	r1, #0
 8000b12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b16:	d014      	beq.n	8000b42 <__aeabi_fmul+0x15e>
 8000b18:	ea92 0f0c 	teq	r2, ip
 8000b1c:	d101      	bne.n	8000b22 <__aeabi_fmul+0x13e>
 8000b1e:	0242      	lsls	r2, r0, #9
 8000b20:	d10f      	bne.n	8000b42 <__aeabi_fmul+0x15e>
 8000b22:	ea93 0f0c 	teq	r3, ip
 8000b26:	d103      	bne.n	8000b30 <__aeabi_fmul+0x14c>
 8000b28:	024b      	lsls	r3, r1, #9
 8000b2a:	bf18      	it	ne
 8000b2c:	4608      	movne	r0, r1
 8000b2e:	d108      	bne.n	8000b42 <__aeabi_fmul+0x15e>
 8000b30:	ea80 0001 	eor.w	r0, r0, r1
 8000b34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_fdiv>:
 8000b4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b54:	bf1e      	ittt	ne
 8000b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5a:	ea92 0f0c 	teqne	r2, ip
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d069      	beq.n	8000c38 <__aeabi_fdiv+0xec>
 8000b64:	eba2 0203 	sub.w	r2, r2, r3
 8000b68:	ea80 0c01 	eor.w	ip, r0, r1
 8000b6c:	0249      	lsls	r1, r1, #9
 8000b6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b72:	d037      	beq.n	8000be4 <__aeabi_fdiv+0x98>
 8000b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	428b      	cmp	r3, r1
 8000b86:	bf38      	it	cc
 8000b88:	005b      	lslcc	r3, r3, #1
 8000b8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b92:	428b      	cmp	r3, r1
 8000b94:	bf24      	itt	cs
 8000b96:	1a5b      	subcs	r3, r3, r1
 8000b98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ba0:	bf24      	itt	cs
 8000ba2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ba6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000baa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bae:	bf24      	itt	cs
 8000bb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bbc:	bf24      	itt	cs
 8000bbe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bc2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bce:	d1e0      	bne.n	8000b92 <__aeabi_fdiv+0x46>
 8000bd0:	2afd      	cmp	r2, #253	; 0xfd
 8000bd2:	f63f af50 	bhi.w	8000a76 <__aeabi_fmul+0x92>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000be8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bec:	327f      	adds	r2, #127	; 0x7f
 8000bee:	bfc2      	ittt	gt
 8000bf0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bf4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bf8:	4770      	bxgt	lr
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	3a01      	subs	r2, #1
 8000c04:	e737      	b.n	8000a76 <__aeabi_fmul+0x92>
 8000c06:	f092 0f00 	teq	r2, #0
 8000c0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0040      	lsleq	r0, r0, #1
 8000c12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c16:	3a01      	subeq	r2, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fdiv+0xc2>
 8000c1a:	ea40 000c 	orr.w	r0, r0, ip
 8000c1e:	f093 0f00 	teq	r3, #0
 8000c22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0049      	lsleq	r1, r1, #1
 8000c2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c2e:	3b01      	subeq	r3, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fdiv+0xda>
 8000c32:	ea41 010c 	orr.w	r1, r1, ip
 8000c36:	e795      	b.n	8000b64 <__aeabi_fdiv+0x18>
 8000c38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c3c:	ea92 0f0c 	teq	r2, ip
 8000c40:	d108      	bne.n	8000c54 <__aeabi_fdiv+0x108>
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	f47f af7d 	bne.w	8000b42 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	f47f af70 	bne.w	8000b30 <__aeabi_fmul+0x14c>
 8000c50:	4608      	mov	r0, r1
 8000c52:	e776      	b.n	8000b42 <__aeabi_fmul+0x15e>
 8000c54:	ea93 0f0c 	teq	r3, ip
 8000c58:	d104      	bne.n	8000c64 <__aeabi_fdiv+0x118>
 8000c5a:	024b      	lsls	r3, r1, #9
 8000c5c:	f43f af4c 	beq.w	8000af8 <__aeabi_fmul+0x114>
 8000c60:	4608      	mov	r0, r1
 8000c62:	e76e      	b.n	8000b42 <__aeabi_fmul+0x15e>
 8000c64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c68:	bf18      	it	ne
 8000c6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6e:	d1ca      	bne.n	8000c06 <__aeabi_fdiv+0xba>
 8000c70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c74:	f47f af5c 	bne.w	8000b30 <__aeabi_fmul+0x14c>
 8000c78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c7c:	f47f af3c 	bne.w	8000af8 <__aeabi_fmul+0x114>
 8000c80:	e75f      	b.n	8000b42 <__aeabi_fmul+0x15e>
 8000c82:	bf00      	nop

08000c84 <__aeabi_f2uiz>:
 8000c84:	0042      	lsls	r2, r0, #1
 8000c86:	d20e      	bcs.n	8000ca6 <__aeabi_f2uiz+0x22>
 8000c88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c8c:	d30b      	bcc.n	8000ca6 <__aeabi_f2uiz+0x22>
 8000c8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c96:	d409      	bmi.n	8000cac <__aeabi_f2uiz+0x28>
 8000c98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca4:	4770      	bx	lr
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	4770      	bx	lr
 8000cac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cb0:	d101      	bne.n	8000cb6 <__aeabi_f2uiz+0x32>
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	d102      	bne.n	8000cbc <__aeabi_f2uiz+0x38>
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	4770      	bx	lr
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fd67 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f86d 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f927 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000cd6:	f000 f8af 	bl	8000e38 <MX_TIM3_Init>
 // MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  Alcd_Init(&LCD_Display, 2, 0);     //start display
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	482b      	ldr	r0, [pc, #172]	; (8000d8c <main+0xc8>)
 8000ce0:	f000 fc34 	bl	800154c <Alcd_Init>
  //HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);                //counter start for encoder mode CH3 and CH4
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);     //output to servo
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	482a      	ldr	r0, [pc, #168]	; (8000d90 <main+0xcc>)
 8000ce8:	f001 fd48 	bl	800277c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1500);
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <main+0xcc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  //HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);    //start Output Compare
  //htim1.Instance->CCR1 =1500;                 //reg el by7sl feh el comparison //bn8yar position el servo

  Alcd_PutAt_n(&LCD_Display, 0, 0, "Yousti", 6);
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <main+0xd0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4822      	ldr	r0, [pc, #136]	; (8000d8c <main+0xc8>)
 8000d02:	f000 fcde 	bl	80016c2 <Alcd_PutAt_n>
  HAL_Delay(3000);
 8000d06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d0a:	f000 fda9 	bl	8001860 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //uint8_t encoder_count = __HAL_TIM_GET_COUNTER(&htim4);  //EL COUNTER HY3ED ANA MSHEET KAM STEP

      float degrees = ((float)encoder_count / counts_per_revolution )* 180.0; //every step = 9deg
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0xd4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fe12 	bl	800093c <__aeabi_i2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4920      	ldr	r1, [pc, #128]	; (8000d9c <main+0xd8>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff15 	bl	8000b4c <__aeabi_fdiv>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fca7 	bl	8000678 <__aeabi_f2d>
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <main+0xdc>)
 8000d30:	f7ff fa14 	bl	800015c <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f7ff fcf4 	bl	8000728 <__aeabi_d2f>
 8000d40:	4603      	mov	r3, r0
 8000d42:	607b      	str	r3, [r7, #4]
      uint32_t pwm_val = degrees_to_pwm(degrees);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f93b 	bl	8000fc0 <degrees_to_pwm>
 8000d4a:	6038      	str	r0, [r7, #0]
      sprintf(degree_str,"You're at: %d",encoder_count);
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <main+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4914      	ldr	r1, [pc, #80]	; (8000da4 <main+0xe0>)
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <main+0xe4>)
 8000d56:	f002 fa3f 	bl	80031d8 <siprintf>

      Alcd_PutAt_n(&LCD_Display, 0, 0, degree_str, strlen(degree_str));
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <main+0xe4>)
 8000d5c:	f7ff f9f6 	bl	800014c <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <main+0xe4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <main+0xc8>)
 8000d6e:	f000 fca8 	bl	80016c2 <Alcd_PutAt_n>
      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, pwm_val);
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <main+0xcc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_Delay(1000);
 8000d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7e:	f000 fd6f 	bl	8001860 <HAL_Delay>
      Alcd_Clear(&LCD_Display);
 8000d82:	4802      	ldr	r0, [pc, #8]	; (8000d8c <main+0xc8>)
 8000d84:	f000 fcb6 	bl	80016f4 <Alcd_Clear>
  {
 8000d88:	e7c1      	b.n	8000d0e <main+0x4a>
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000098 	.word	0x20000098
 8000d94:	08003b54 	.word	0x08003b54
 8000d98:	200000f4 	.word	0x200000f4
 8000d9c:	41a00000 	.word	0x41a00000
 8000da0:	40668000 	.word	0x40668000
 8000da4:	08003b5c 	.word	0x08003b5c
 8000da8:	200000e0 	.word	0x200000e0

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fa2c 	bl	8003218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 f831 	bl	8001e5c <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e00:	f000 f96c 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fa9e 	bl	8002360 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f957 	bl	80010dc <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_TIM3_Init+0xe8>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e70:	2247      	movs	r2, #71	; 0x47
 8000e72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e7c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e8e:	4823      	ldr	r0, [pc, #140]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000e90:	f001 fbcc 	bl	800262c <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e9a:	f000 f91f 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481c      	ldr	r0, [pc, #112]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000eac:	f001 fdca 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eb6:	f000 f911 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000ebc:	f001 fc05 	bl	80026ca <HAL_TIM_PWM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ec6:	f000 f909 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000eda:	f002 f91f 	bl	800311c <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ee4:	f000 f8fa 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000f00:	f001 fcde 	bl	80028c0 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f0a:	f000 f8e7 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM3_Init+0xe4>)
 8000f10:	f000 f93a 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3738      	adds	r7, #56	; 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000098 	.word	0x20000098
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0320 	and.w	r3, r3, #32
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_GPIO_Init+0x94>)
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_GPIO_Init+0x98>)
 8000f96:	f000 fd95 	bl	8001ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2028      	movs	r0, #40	; 0x28
 8000fa0:	f000 fd59 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa4:	2028      	movs	r0, #40	; 0x28
 8000fa6:	f000 fd72 	bl	8001a8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	10110000 	.word	0x10110000
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <degrees_to_pwm>:

/* USER CODE BEGIN 4 */
uint32_t degrees_to_pwm(float val){  //search
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	return ((val *1000)/180)+1000 ;
 8000fc8:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <degrees_to_pwm+0x38>)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fd0a 	bl	80009e4 <__aeabi_fmul>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	490a      	ldr	r1, [pc, #40]	; (8000ffc <degrees_to_pwm+0x3c>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fdb9 	bl	8000b4c <__aeabi_fdiv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <degrees_to_pwm+0x38>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fbf8 	bl	80007d4 <__addsf3>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe4c 	bl	8000c84 <__aeabi_f2uiz>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	447a0000 	.word	0x447a0000
 8000ffc:	43340000 	.word	0x43340000

08001000 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
	sprintf(degree_str,"interrupt: %d",encoder_count);
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	492e      	ldr	r1, [pc, #184]	; (80010cc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001014:	f002 f8e0 	bl	80031d8 <siprintf>
	//Alcd_PutAt_n(&LCD_Display, 0, 0, degree_str, strlen(degree_str));
	static uint8_t prev_stateA =0;
	uint8_t current_stateA = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101c:	482d      	ldr	r0, [pc, #180]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 800101e:	f000 fed5 	bl	8001dcc <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
	uint8_t current_stateB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	482a      	ldr	r0, [pc, #168]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 800102c:	f000 fece 	bl	8001dcc <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	73bb      	strb	r3, [r7, #14]

	  if (GPIO_Pin == GPIO_PIN_14)  //in contact with pin A // A0, AB, B0 ..... 0B,AB,A0
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800103a:	d117      	bne.n	800106c <HAL_GPIO_EXTI_Callback+0x6c>
	  {
	    if (current_stateA != prev_stateA) //lw el A 7alto et8yaret
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	429a      	cmp	r2, r3
 8001044:	d02d      	beq.n	80010a2 <HAL_GPIO_EXTI_Callback+0xa2>
	    {
	      if (current_stateA != current_stateB)  //lw el A mo5tlf 3n el B   //clkwise
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	429a      	cmp	r2, r3
 800104c:	d005      	beq.n	800105a <HAL_GPIO_EXTI_Callback+0x5a>
	      {
	        encoder_count++;  //yb2a ana blef l odaam
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e004      	b.n	8001064 <HAL_GPIO_EXTI_Callback+0x64>
	      }
	      else
	      {
	        encoder_count--;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001062:	6013      	str	r3, [r2, #0]
	      }
	      prev_stateA = current_stateA;
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	7013      	strb	r3, [r2, #0]
 800106a:	e01a      	b.n	80010a2 <HAL_GPIO_EXTI_Callback+0xa2>
	    }
	  }

	  else if (GPIO_Pin == GPIO_PIN_15)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001072:	d116      	bne.n	80010a2 <HAL_GPIO_EXTI_Callback+0xa2>
	  {
	    if (current_stateA != prev_stateA)
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	429a      	cmp	r2, r3
 800107c:	d011      	beq.n	80010a2 <HAL_GPIO_EXTI_Callback+0xa2>
	    {
	      if (current_stateA == current_stateB)    //counterclkwise
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	429a      	cmp	r2, r3
 8001084:	d105      	bne.n	8001092 <HAL_GPIO_EXTI_Callback+0x92>
	      {
	        encoder_count++;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e004      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x9c>
	      }
	      else
	      {
	        encoder_count--;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800109a:	6013      	str	r3, [r2, #0]
	      }
	      prev_stateA = current_stateA;
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	7013      	strb	r3, [r2, #0]
	    }
	  }
	  if(encoder_count==20){
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b14      	cmp	r3, #20
 80010a8:	d102      	bne.n	80010b0 <HAL_GPIO_EXTI_Callback+0xb0>
		  encoder_count=0;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
	  }
	  if(encoder_count==-1){
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0xc0>
		  encoder_count=19;
 80010ba:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010bc:	2213      	movs	r2, #19
 80010be:	601a      	str	r2, [r3, #0]
	  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000f4 	.word	0x200000f4
 80010cc:	08003b6c 	.word	0x08003b6c
 80010d0:	200000e0 	.word	0x200000e0
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	200000f8 	.word	0x200000f8

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>
	...

080010e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_MspInit+0x5c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x5c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x60>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_MspInit+0x60>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x34>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40000400 	.word	0x40000400
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_TIM_MspPostInit+0x58>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d117      	bne.n	80011d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_TIM_MspPostInit+0x5c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_MspPostInit+0x60>)
 80011d4:	f000 fc76 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001232:	f000 faf9 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}

0800123a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800123e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001242:	f000 fdf3 	bl	8001e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001246:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800124a:	f000 fdef 	bl	8001e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f001 ffd0 	bl	8003228 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20005000 	.word	0x20005000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	200000fc 	.word	0x200000fc
 80012bc:	20000250 	.word	0x20000250

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012cc:	f7ff fff8 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012e8:	4c09      	ldr	r4, [pc, #36]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f001 ff9d 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff fce3 	bl	8000cc4 <main>
  bx lr
 80012fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001308:	08003bdc 	.word	0x08003bdc
  ldr r2, =_sbss
 800130c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001310:	2000024c 	.word	0x2000024c

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <DWT_Delay_Init+0x58>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <DWT_Delay_Init+0x58>)
 8001322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001326:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <DWT_Delay_Init+0x58>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4a10      	ldr	r2, [pc, #64]	; (8001370 <DWT_Delay_Init+0x58>)
 800132e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001332:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <DWT_Delay_Init+0x5c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <DWT_Delay_Init+0x5c>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <DWT_Delay_Init+0x5c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <DWT_Delay_Init+0x5c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <DWT_Delay_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001352:	bf00      	nop
     __ASM volatile ("NOP");
 8001354:	bf00      	nop
  __ASM volatile ("NOP");
 8001356:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <DWT_Delay_Init+0x5c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001360:	2300      	movs	r3, #0
 8001362:	e000      	b.n	8001366 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001364:	2301      	movs	r3, #1
  }
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000edf0 	.word	0xe000edf0
 8001374:	e0001000 	.word	0xe0001000

08001378 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <DWT_Delay_us+0x40>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001386:	f001 f929 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <DWT_Delay_us+0x44>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 800139c:	bf00      	nop
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <DWT_Delay_us+0x40>)
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad2      	subs	r2, r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3f8      	bcc.n	800139e <DWT_Delay_us+0x26>
		;
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e0001000 	.word	0xe0001000
 80013bc:	431bde83 	.word	0x431bde83

080013c0 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffd3 	bl	8001378 <DWT_Delay_us>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	4619      	mov	r1, r3
 80013f2:	230f      	movs	r3, #15
 80013f4:	408b      	lsls	r3, r1
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	7a09      	ldrb	r1, [r1, #8]
 800140e:	408b      	lsls	r3, r1
 8001410:	4619      	mov	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	430a      	orrs	r2, r1
 8001418:	60da      	str	r2, [r3, #12]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6958      	ldr	r0, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	8b1b      	ldrh	r3, [r3, #24]
 8001438:	78fa      	ldrb	r2, [r7, #3]
 800143a:	4619      	mov	r1, r3
 800143c:	f000 fcdd 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68d8      	ldr	r0, [r3, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	8a1b      	ldrh	r3, [r3, #16]
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	4619      	mov	r1, r3
 8001460:	f000 fccb 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	f107 0208 	add.w	r2, r7, #8
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fb12 	bl	8001ac4 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a1b      	ldrh	r3, [r3, #16]
 80014a4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f107 0208 	add.w	r2, r7, #8
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fb07 	bl	8001ac4 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7a1b      	ldrb	r3, [r3, #8]
 80014ba:	461a      	mov	r2, r3
 80014bc:	230f      	movs	r3, #15
 80014be:	4093      	lsls	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f107 0208 	add.w	r2, r7, #8
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 faf9 	bl	8001ac4 <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
 80014e6:	4613      	mov	r3, r2
 80014e8:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff98 	bl	8001424 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff6c 	bl	80013da <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff9f 	bl	8001448 <EN_SET>
 800150a:	200a      	movs	r0, #10
 800150c:	f7ff ff58 	bl	80013c0 <usDelay>
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff98 	bl	8001448 <EN_SET>
 8001518:	2064      	movs	r0, #100	; 0x64
 800151a:	f7ff ff51 	bl	80013c0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800151e:	78bb      	ldrb	r3, [r7, #2]
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff59 	bl	80013da <Write_HalfByte>
	PulseEn
 8001528:	2101      	movs	r1, #1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff8c 	bl	8001448 <EN_SET>
 8001530:	200a      	movs	r0, #10
 8001532:	f7ff ff45 	bl	80013c0 <usDelay>
 8001536:	2100      	movs	r1, #0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff85 	bl	8001448 <EN_SET>
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f7ff ff3e 	bl	80013c0 <usDelay>
	;
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
 8001558:	4613      	mov	r3, r2
 800155a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 800155c:	f7ff fedc 	bl	8001318 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff83 	bl	800146c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	78ba      	ldrb	r2, [r7, #2]
 8001576:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001578:	78bb      	ldrb	r3, [r7, #2]
 800157a:	3340      	adds	r3, #64	; 0x40
 800157c:	b2da      	uxtb	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8001582:	2100      	movs	r1, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff4d 	bl	8001424 <RS_SET>
	EN_SET(lcd, 0);
 800158a:	2100      	movs	r1, #0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff5b 	bl	8001448 <EN_SET>
	usDelay(50000);
 8001592:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001596:	f7ff ff13 	bl	80013c0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e018      	b.n	80015d2 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 80015a0:	2103      	movs	r1, #3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff19 	bl	80013da <Write_HalfByte>
		PulseEn
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff4c 	bl	8001448 <EN_SET>
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff ff05 	bl	80013c0 <usDelay>
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff45 	bl	8001448 <EN_SET>
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f7ff fefe 	bl	80013c0 <usDelay>
		;
		usDelay(4500);
 80015c4:	f241 1094 	movw	r0, #4500	; 0x1194
 80015c8:	f7ff fefa 	bl	80013c0 <usDelay>
	for (x = 0; x < 2; x++)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d9e3      	bls.n	80015a0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80015d8:	2103      	movs	r1, #3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fefd 	bl	80013da <Write_HalfByte>
	PulseEn
 80015e0:	2101      	movs	r1, #1
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff30 	bl	8001448 <EN_SET>
 80015e8:	200a      	movs	r0, #10
 80015ea:	f7ff fee9 	bl	80013c0 <usDelay>
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <EN_SET>
 80015f6:	2064      	movs	r0, #100	; 0x64
 80015f8:	f7ff fee2 	bl	80013c0 <usDelay>
	;
	usDelay(150);
 80015fc:	2096      	movs	r0, #150	; 0x96
 80015fe:	f7ff fedf 	bl	80013c0 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8001602:	2102      	movs	r1, #2
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fee8 	bl	80013da <Write_HalfByte>
	PulseEn
 800160a:	2101      	movs	r1, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff1b 	bl	8001448 <EN_SET>
 8001612:	200a      	movs	r0, #10
 8001614:	f7ff fed4 	bl	80013c0 <usDelay>
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff14 	bl	8001448 <EN_SET>
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f7ff fecd 	bl	80013c0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001626:	2228      	movs	r2, #40	; 0x28
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff55 	bl	80014da <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f86d 	bl	8001716 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f859 	bl	80016f4 <Alcd_Clear>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	4613      	mov	r3, r2
 8001658:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	7e9a      	ldrb	r2, [r3, #26]
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800166e:	b25b      	sxtb	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff2f 	bl	80014da <Alcd_SendByte>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
 8001696:	e00b      	b.n	80016b0 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	2101      	movs	r1, #1
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff ff18 	bl	80014da <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	3301      	adds	r3, #1
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	7dfa      	ldrb	r2, [r7, #23]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3ef      	bcc.n	8001698 <Alcd_Put_n+0x14>
	}
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	72fb      	strb	r3, [r7, #11]
 80016d0:	4613      	mov	r3, r2
 80016d2:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80016d4:	7aba      	ldrb	r2, [r7, #10]
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	4619      	mov	r1, r3
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff ffb5 	bl	800164a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80016e0:	7e3b      	ldrb	r3, [r7, #24]
 80016e2:	461a      	mov	r2, r3
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff ffcc 	bl	8001684 <Alcd_Put_n>
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff feea 	bl	80014da <Alcd_SendByte>
	usDelay(2000);
 8001706:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800170a:	f7ff fe59 	bl	80013c0 <usDelay>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	4608      	mov	r0, r1
 8001720:	4611      	mov	r1, r2
 8001722:	461a      	mov	r2, r3
 8001724:	4603      	mov	r3, r0
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	460b      	mov	r3, r1
 800172a:	70bb      	strb	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7f9b      	ldrb	r3, [r3, #30]
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7f9b      	ldrb	r3, [r3, #30]
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 800175e:	787b      	ldrb	r3, [r7, #1]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7f9b      	ldrb	r3, [r3, #30]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f9b      	ldrb	r3, [r3, #30]
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f9b      	ldrb	r3, [r3, #30]
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	2100      	movs	r1, #0
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fea3 	bl	80014da <Alcd_SendByte>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f947 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fc96 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f95f 	bl	8001aaa <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f927 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000020 	.word	0x20000020
 8001820:	20000028 	.word	0x20000028
 8001824:	20000024 	.word	0x20000024

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x20>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000028 	.word	0x20000028
 8001848:	20000100 	.word	0x20000100

0800184c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000100 	.word	0x20000100

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff0 	bl	800184c <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffe0 	bl	800184c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000028 	.word	0x20000028

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4906      	ldr	r1, [pc, #24]	; (8001940 <__NVIC_EnableIRQ+0x34>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff90 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff2d 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff42 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff35 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa2 	bl	80019fc <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b08b      	sub	sp, #44	; 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	e169      	b.n	8001dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8158 	bne.w	8001da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a9a      	ldr	r2, [pc, #616]	; (8001d64 <HAL_GPIO_Init+0x2a0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d05e      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b00:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_GPIO_Init+0x2a0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d875      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b06:	4a98      	ldr	r2, [pc, #608]	; (8001d68 <HAL_GPIO_Init+0x2a4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d058      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b0c:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <HAL_GPIO_Init+0x2a4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d86f      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b12:	4a96      	ldr	r2, [pc, #600]	; (8001d6c <HAL_GPIO_Init+0x2a8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d052      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b18:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <HAL_GPIO_Init+0x2a8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d869      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b1e:	4a94      	ldr	r2, [pc, #592]	; (8001d70 <HAL_GPIO_Init+0x2ac>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04c      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b24:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_GPIO_Init+0x2ac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d863      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a92      	ldr	r2, [pc, #584]	; (8001d74 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d046      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b30:	4a90      	ldr	r2, [pc, #576]	; (8001d74 <HAL_GPIO_Init+0x2b0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d85d      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d82a      	bhi.n	8001b90 <HAL_GPIO_Init+0xcc>
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d859      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b3e:	a201      	add	r2, pc, #4	; (adr r2, 8001b44 <HAL_GPIO_Init+0x80>)
 8001b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b44:	08001bbf 	.word	0x08001bbf
 8001b48:	08001b99 	.word	0x08001b99
 8001b4c:	08001bab 	.word	0x08001bab
 8001b50:	08001bed 	.word	0x08001bed
 8001b54:	08001bf3 	.word	0x08001bf3
 8001b58:	08001bf3 	.word	0x08001bf3
 8001b5c:	08001bf3 	.word	0x08001bf3
 8001b60:	08001bf3 	.word	0x08001bf3
 8001b64:	08001bf3 	.word	0x08001bf3
 8001b68:	08001bf3 	.word	0x08001bf3
 8001b6c:	08001bf3 	.word	0x08001bf3
 8001b70:	08001bf3 	.word	0x08001bf3
 8001b74:	08001bf3 	.word	0x08001bf3
 8001b78:	08001bf3 	.word	0x08001bf3
 8001b7c:	08001bf3 	.word	0x08001bf3
 8001b80:	08001bf3 	.word	0x08001bf3
 8001b84:	08001bf3 	.word	0x08001bf3
 8001b88:	08001ba1 	.word	0x08001ba1
 8001b8c:	08001bb5 	.word	0x08001bb5
 8001b90:	4a79      	ldr	r2, [pc, #484]	; (8001d78 <HAL_GPIO_Init+0x2b4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b96:	e02c      	b.n	8001bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e029      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e024      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	623b      	str	r3, [r7, #32]
          break;
 8001bb2:	e01f      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	330c      	adds	r3, #12
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e01a      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e013      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	611a      	str	r2, [r3, #16]
          break;
 8001bde:	e009      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be0:	2308      	movs	r3, #8
 8001be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	615a      	str	r2, [r3, #20]
          break;
 8001bea:	e003      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
          break;
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          break;
 8001bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2bff      	cmp	r3, #255	; 0xff
 8001bf8:	d801      	bhi.n	8001bfe <HAL_GPIO_Init+0x13a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	e001      	b.n	8001c02 <HAL_GPIO_Init+0x13e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d802      	bhi.n	8001c10 <HAL_GPIO_Init+0x14c>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x152>
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3b08      	subs	r3, #8
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80b1 	beq.w	8001da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_GPIO_Init+0x2b8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <HAL_GPIO_Init+0x2b8>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_GPIO_Init+0x2b8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_GPIO_Init+0x2bc>)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <HAL_GPIO_Init+0x2c0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_GPIO_Init+0x1ec>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <HAL_GPIO_Init+0x2c4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1e8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3e      	ldr	r2, [pc, #248]	; (8001d8c <HAL_GPIO_Init+0x2c8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <HAL_GPIO_Init+0x2cc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1e0>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cc2:	492f      	ldr	r1, [pc, #188]	; (8001d80 <HAL_GPIO_Init+0x2bc>)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	492c      	ldr	r1, [pc, #176]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4928      	ldr	r1, [pc, #160]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	491e      	ldr	r1, [pc, #120]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4918      	ldr	r1, [pc, #96]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4914      	ldr	r1, [pc, #80]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d021      	beq.n	8001d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e021      	b.n	8001da6 <HAL_GPIO_Init+0x2e2>
 8001d62:	bf00      	nop
 8001d64:	10320000 	.word	0x10320000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10220000 	.word	0x10220000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10120000 	.word	0x10120000
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40011400 	.word	0x40011400
 8001d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f47f ae8e 	bne.w	8001ad8 <HAL_GPIO_Init+0x14>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	372c      	adds	r7, #44	; 0x2c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	807b      	strh	r3, [r7, #2]
 8001e06:	4613      	mov	r3, r2
 8001e08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0a:	787b      	ldrb	r3, [r7, #1]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e10:	887a      	ldrh	r2, [r7, #2]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e16:	e003      	b.n	8001e20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f8d8 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e272      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e88:	4b8f      	ldr	r3, [pc, #572]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
 8001e94:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x12c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d168      	bne.n	8001f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e24c      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x76>
 8001ec4:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a7f      	ldr	r2, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e02e      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7a      	ldr	r2, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a77      	ldr	r2, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0xbc>
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a71      	ldr	r2, [pc, #452]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001f18:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a67      	ldr	r2, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc88 	bl	800184c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fc84 	bl	800184c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e200      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe4>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc74 	bl	800184c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc70 	bl	800184c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1ec      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x10c>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa2:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c0      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4939      	ldr	r1, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fc29 	bl	800184c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fc25 	bl	800184c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a1      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4927      	ldr	r1, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fc08 	bl	800184c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fc04 	bl	800184c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e180      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03a      	beq.n	80020e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d019      	beq.n	80020a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7ff fbe8 	bl	800184c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fbe4 	bl	800184c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e160      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 faa6 	bl	80025f0 <RCC_Delay>
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7ff fbce 	bl	800184c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff fbca 	bl	800184c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e146      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	42420000 	.word	0x42420000
 80020d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e9      	bne.n	80020b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a6 	beq.w	800223a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10d      	bne.n	800211a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7e      	ldr	r2, [pc, #504]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff fb8b 	bl	800184c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7ff fb87 	bl	800184c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e103      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b75      	ldr	r3, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x312>
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e02d      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x334>
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a66      	ldr	r2, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	e01c      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x356>
 8002198:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a60      	ldr	r2, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4b58      	ldr	r3, [pc, #352]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a57      	ldr	r2, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d015      	beq.n	80021fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fb3b 	bl	800184c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff fb37 	bl	800184c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0b1      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ee      	beq.n	80021da <HAL_RCC_OscConfig+0x37e>
 80021fc:	e014      	b.n	8002228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb25 	bl	800184c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7ff fb21 	bl	800184c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e09b      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d061      	beq.n	8002314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d146      	bne.n	80022e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff faf5 	bl	800184c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff faf1 	bl	800184c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e06d      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d108      	bne.n	80022a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4921      	ldr	r1, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a19      	ldr	r1, [r3, #32]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	430b      	orrs	r3, r1
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7ff fac5 	bl	800184c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff fac1 	bl	800184c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46a>
 80022e4:	e035      	b.n	8002352 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff faae 	bl	800184c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff faaa 	bl	800184c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e026      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x498>
 8002312:	e01e      	b.n	8002352 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e019      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x500>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0d0      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d910      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 0207 	bic.w	r2, r3, #7
 800238a:	4965      	ldr	r1, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d040      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e073      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06b      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4936      	ldr	r1, [pc, #216]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7ff f9fc 	bl	800184c <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f9f8 	bl	800184c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e053      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d210      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1cc>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1d0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f95a 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
 8002528:	08003b7c 	.word	0x08003b7c
 800252c:	20000020 	.word	0x20000020
 8002530:	20000024 	.word	0x20000024

08002534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x30>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x36>
 8002562:	e027      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002566:	613b      	str	r3, [r7, #16]
      break;
 8002568:	e027      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	0c5b      	lsrs	r3, r3, #17
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	fb03 f202 	mul.w	r2, r3, r2
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e004      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	613b      	str	r3, [r7, #16]
      break;
 80025b2:	e002      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetSysClockFreq+0x98>)
 80025b6:	613b      	str	r3, [r7, #16]
      break;
 80025b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ba:	693b      	ldr	r3, [r7, #16]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	007a1200 	.word	0x007a1200
 80025d0:	08003b8c 	.word	0x08003b8c
 80025d4:	08003b9c 	.word	0x08003b9c
 80025d8:	003d0900 	.word	0x003d0900

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_RCC_GetHCLKFreq+0x10>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000020 	.word	0x20000020

080025f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <RCC_Delay+0x34>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <RCC_Delay+0x38>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a5b      	lsrs	r3, r3, #9
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800260c:	bf00      	nop
  }
  while (Delay --);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	60fa      	str	r2, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <RCC_Delay+0x1c>
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000020 	.word	0x20000020
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fd7a 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fab2 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e041      	b.n	8002760 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f839 	bl	8002768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f000 fa63 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x24>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e022      	b.n	80027e6 <HAL_TIM_PWM_Start+0x6a>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d109      	bne.n	80027ba <HAL_TIM_PWM_Start+0x3e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	e015      	b.n	80027e6 <HAL_TIM_PWM_Start+0x6a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d109      	bne.n	80027d4 <HAL_TIM_PWM_Start+0x58>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e008      	b.n	80027e6 <HAL_TIM_PWM_Start+0x6a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e05e      	b.n	80028ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0x82>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	e013      	b.n	8002826 <HAL_TIM_PWM_Start+0xaa>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0x92>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800280c:	e00b      	b.n	8002826 <HAL_TIM_PWM_Start+0xaa>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d104      	bne.n	800281e <HAL_TIM_PWM_Start+0xa2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	e003      	b.n	8002826 <HAL_TIM_PWM_Start+0xaa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fc50 	bl	80030d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_TIM_PWM_Start+0x138>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d107      	bne.n	800284e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_TIM_PWM_Start+0x138>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_TIM_PWM_Start+0xfa>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d009      	beq.n	8002876 <HAL_TIM_PWM_Start+0xfa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_PWM_Start+0x13c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_TIM_PWM_Start+0xfa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_TIM_PWM_Start+0x140>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d111      	bne.n	800289a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b06      	cmp	r3, #6
 8002886:	d010      	beq.n	80028aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	e007      	b.n	80028aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800

080028c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028da:	2302      	movs	r3, #2
 80028dc:	e0ae      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	f200 809f 	bhi.w	8002a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002929 	.word	0x08002929
 80028f8:	08002a2d 	.word	0x08002a2d
 80028fc:	08002a2d 	.word	0x08002a2d
 8002900:	08002a2d 	.word	0x08002a2d
 8002904:	08002969 	.word	0x08002969
 8002908:	08002a2d 	.word	0x08002a2d
 800290c:	08002a2d 	.word	0x08002a2d
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	080029ab 	.word	0x080029ab
 8002918:	08002a2d 	.word	0x08002a2d
 800291c:	08002a2d 	.word	0x08002a2d
 8002920:	08002a2d 	.word	0x08002a2d
 8002924:	080029eb 	.word	0x080029eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f9b2 	bl	8002c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
      break;
 8002966:	e064      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f9f8 	bl	8002d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
      break;
 80029a8:	e043      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fa41 	bl	8002e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0208 	orr.w	r2, r2, #8
 80029c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	61da      	str	r2, [r3, #28]
      break;
 80029e8:	e023      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fa8b 	bl	8002f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	61da      	str	r2, [r3, #28]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_ConfigClockSource+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0b4      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x186>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a98:	d03e      	beq.n	8002b18 <HAL_TIM_ConfigClockSource+0xd4>
 8002a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9e:	f200 8087 	bhi.w	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa6:	f000 8086 	beq.w	8002bb6 <HAL_TIM_ConfigClockSource+0x172>
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d87f      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	d01a      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xa6>
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d87b      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b60      	cmp	r3, #96	; 0x60
 8002aba:	d050      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x11a>
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d877      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b50      	cmp	r3, #80	; 0x50
 8002ac2:	d03c      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0xfa>
 8002ac4:	2b50      	cmp	r3, #80	; 0x50
 8002ac6:	d873      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d058      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x13a>
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d86f      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b30      	cmp	r3, #48	; 0x30
 8002ad2:	d064      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ad4:	2b30      	cmp	r3, #48	; 0x30
 8002ad6:	d86b      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d060      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d867      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d05a      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ae8:	e062      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002afa:	f000 facc 	bl	8003096 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	609a      	str	r2, [r3, #8]
      break;
 8002b16:	e04f      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b28:	f000 fab5 	bl	8003096 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b3a:	609a      	str	r2, [r3, #8]
      break;
 8002b3c:	e03c      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 fa2c 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2150      	movs	r1, #80	; 0x50
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fa83 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e02c      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 fa4a 	bl	8003004 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2160      	movs	r1, #96	; 0x60
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa73 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e01c      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f000 fa0c 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fa63 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b9c:	e00c      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f000 fa5a 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002bae:	e003      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e000      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <TIM_Base_SetConfig+0xbc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d007      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <TIM_Base_SetConfig+0xbc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	615a      	str	r2, [r3, #20]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f023 0201 	bic.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10c      	bne.n	8002d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0308 	bic.w	r3, r3, #8
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f023 0210 	bic.w	r2, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0320 	bic.w	r3, r3, #32
 8002dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <TIM_OC2_SetConfig+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10d      	bne.n	8002de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <TIM_OC2_SetConfig+0xd0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d113      	bne.n	8002e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40012c00 	.word	0x40012c00

08002e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10d      	bne.n	8002eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d113      	bne.n	8002ee2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00

08002f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	031b      	lsls	r3, r3, #12
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <TIM_OC4_SetConfig+0x98>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 030a 	bic.w	r3, r3, #10
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0210 	bic.w	r2, r3, #16
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	031b      	lsls	r3, r3, #12
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 0307 	orr.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e046      	b.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d009      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10c      	bne.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <siprintf>:
 80031d8:	b40e      	push	{r1, r2, r3}
 80031da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031de:	b500      	push	{lr}
 80031e0:	b09c      	sub	sp, #112	; 0x70
 80031e2:	ab1d      	add	r3, sp, #116	; 0x74
 80031e4:	9002      	str	r0, [sp, #8]
 80031e6:	9006      	str	r0, [sp, #24]
 80031e8:	9107      	str	r1, [sp, #28]
 80031ea:	9104      	str	r1, [sp, #16]
 80031ec:	4808      	ldr	r0, [pc, #32]	; (8003210 <siprintf+0x38>)
 80031ee:	4909      	ldr	r1, [pc, #36]	; (8003214 <siprintf+0x3c>)
 80031f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031f4:	9105      	str	r1, [sp, #20]
 80031f6:	6800      	ldr	r0, [r0, #0]
 80031f8:	a902      	add	r1, sp, #8
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	f000 f98e 	bl	800351c <_svfiprintf_r>
 8003200:	2200      	movs	r2, #0
 8003202:	9b02      	ldr	r3, [sp, #8]
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	b01c      	add	sp, #112	; 0x70
 8003208:	f85d eb04 	ldr.w	lr, [sp], #4
 800320c:	b003      	add	sp, #12
 800320e:	4770      	bx	lr
 8003210:	20000078 	.word	0x20000078
 8003214:	ffff0208 	.word	0xffff0208

08003218 <memset>:
 8003218:	4603      	mov	r3, r0
 800321a:	4402      	add	r2, r0
 800321c:	4293      	cmp	r3, r2
 800321e:	d100      	bne.n	8003222 <memset+0xa>
 8003220:	4770      	bx	lr
 8003222:	f803 1b01 	strb.w	r1, [r3], #1
 8003226:	e7f9      	b.n	800321c <memset+0x4>

08003228 <__errno>:
 8003228:	4b01      	ldr	r3, [pc, #4]	; (8003230 <__errno+0x8>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000078 	.word	0x20000078

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	2600      	movs	r6, #0
 8003238:	4d0c      	ldr	r5, [pc, #48]	; (800326c <__libc_init_array+0x38>)
 800323a:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	42a6      	cmp	r6, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	f000 fc7a 	bl	8003b3c <_init>
 8003248:	2600      	movs	r6, #0
 800324a:	4d0a      	ldr	r5, [pc, #40]	; (8003274 <__libc_init_array+0x40>)
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <__libc_init_array+0x44>)
 800324e:	1b64      	subs	r4, r4, r5
 8003250:	10a4      	asrs	r4, r4, #2
 8003252:	42a6      	cmp	r6, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f855 3b04 	ldr.w	r3, [r5], #4
 800325c:	4798      	blx	r3
 800325e:	3601      	adds	r6, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f855 3b04 	ldr.w	r3, [r5], #4
 8003266:	4798      	blx	r3
 8003268:	3601      	adds	r6, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	08003bd4 	.word	0x08003bd4
 8003270:	08003bd4 	.word	0x08003bd4
 8003274:	08003bd4 	.word	0x08003bd4
 8003278:	08003bd8 	.word	0x08003bd8

0800327c <__retarget_lock_acquire_recursive>:
 800327c:	4770      	bx	lr

0800327e <__retarget_lock_release_recursive>:
 800327e:	4770      	bx	lr

08003280 <_free_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4605      	mov	r5, r0
 8003284:	2900      	cmp	r1, #0
 8003286:	d040      	beq.n	800330a <_free_r+0x8a>
 8003288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328c:	1f0c      	subs	r4, r1, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	bfb8      	it	lt
 8003292:	18e4      	addlt	r4, r4, r3
 8003294:	f000 f8dc 	bl	8003450 <__malloc_lock>
 8003298:	4a1c      	ldr	r2, [pc, #112]	; (800330c <_free_r+0x8c>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	b933      	cbnz	r3, 80032ac <_free_r+0x2c>
 800329e:	6063      	str	r3, [r4, #4]
 80032a0:	6014      	str	r4, [r2, #0]
 80032a2:	4628      	mov	r0, r5
 80032a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032a8:	f000 b8d8 	b.w	800345c <__malloc_unlock>
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d908      	bls.n	80032c2 <_free_r+0x42>
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	1821      	adds	r1, r4, r0
 80032b4:	428b      	cmp	r3, r1
 80032b6:	bf01      	itttt	eq
 80032b8:	6819      	ldreq	r1, [r3, #0]
 80032ba:	685b      	ldreq	r3, [r3, #4]
 80032bc:	1809      	addeq	r1, r1, r0
 80032be:	6021      	streq	r1, [r4, #0]
 80032c0:	e7ed      	b.n	800329e <_free_r+0x1e>
 80032c2:	461a      	mov	r2, r3
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b10b      	cbz	r3, 80032cc <_free_r+0x4c>
 80032c8:	42a3      	cmp	r3, r4
 80032ca:	d9fa      	bls.n	80032c2 <_free_r+0x42>
 80032cc:	6811      	ldr	r1, [r2, #0]
 80032ce:	1850      	adds	r0, r2, r1
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d10b      	bne.n	80032ec <_free_r+0x6c>
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	4401      	add	r1, r0
 80032d8:	1850      	adds	r0, r2, r1
 80032da:	4283      	cmp	r3, r0
 80032dc:	6011      	str	r1, [r2, #0]
 80032de:	d1e0      	bne.n	80032a2 <_free_r+0x22>
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4408      	add	r0, r1
 80032e6:	6010      	str	r0, [r2, #0]
 80032e8:	6053      	str	r3, [r2, #4]
 80032ea:	e7da      	b.n	80032a2 <_free_r+0x22>
 80032ec:	d902      	bls.n	80032f4 <_free_r+0x74>
 80032ee:	230c      	movs	r3, #12
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	e7d6      	b.n	80032a2 <_free_r+0x22>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	1821      	adds	r1, r4, r0
 80032f8:	428b      	cmp	r3, r1
 80032fa:	bf01      	itttt	eq
 80032fc:	6819      	ldreq	r1, [r3, #0]
 80032fe:	685b      	ldreq	r3, [r3, #4]
 8003300:	1809      	addeq	r1, r1, r0
 8003302:	6021      	streq	r1, [r4, #0]
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	6054      	str	r4, [r2, #4]
 8003308:	e7cb      	b.n	80032a2 <_free_r+0x22>
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	20000244 	.word	0x20000244

08003310 <sbrk_aligned>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4e0e      	ldr	r6, [pc, #56]	; (800334c <sbrk_aligned+0x3c>)
 8003314:	460c      	mov	r4, r1
 8003316:	6831      	ldr	r1, [r6, #0]
 8003318:	4605      	mov	r5, r0
 800331a:	b911      	cbnz	r1, 8003322 <sbrk_aligned+0x12>
 800331c:	f000 fbaa 	bl	8003a74 <_sbrk_r>
 8003320:	6030      	str	r0, [r6, #0]
 8003322:	4621      	mov	r1, r4
 8003324:	4628      	mov	r0, r5
 8003326:	f000 fba5 	bl	8003a74 <_sbrk_r>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	d00a      	beq.n	8003344 <sbrk_aligned+0x34>
 800332e:	1cc4      	adds	r4, r0, #3
 8003330:	f024 0403 	bic.w	r4, r4, #3
 8003334:	42a0      	cmp	r0, r4
 8003336:	d007      	beq.n	8003348 <sbrk_aligned+0x38>
 8003338:	1a21      	subs	r1, r4, r0
 800333a:	4628      	mov	r0, r5
 800333c:	f000 fb9a 	bl	8003a74 <_sbrk_r>
 8003340:	3001      	adds	r0, #1
 8003342:	d101      	bne.n	8003348 <sbrk_aligned+0x38>
 8003344:	f04f 34ff 	mov.w	r4, #4294967295
 8003348:	4620      	mov	r0, r4
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	20000248 	.word	0x20000248

08003350 <_malloc_r>:
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	1ccd      	adds	r5, r1, #3
 8003356:	f025 0503 	bic.w	r5, r5, #3
 800335a:	3508      	adds	r5, #8
 800335c:	2d0c      	cmp	r5, #12
 800335e:	bf38      	it	cc
 8003360:	250c      	movcc	r5, #12
 8003362:	2d00      	cmp	r5, #0
 8003364:	4607      	mov	r7, r0
 8003366:	db01      	blt.n	800336c <_malloc_r+0x1c>
 8003368:	42a9      	cmp	r1, r5
 800336a:	d905      	bls.n	8003378 <_malloc_r+0x28>
 800336c:	230c      	movs	r3, #12
 800336e:	2600      	movs	r6, #0
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4630      	mov	r0, r6
 8003374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800344c <_malloc_r+0xfc>
 800337c:	f000 f868 	bl	8003450 <__malloc_lock>
 8003380:	f8d8 3000 	ldr.w	r3, [r8]
 8003384:	461c      	mov	r4, r3
 8003386:	bb5c      	cbnz	r4, 80033e0 <_malloc_r+0x90>
 8003388:	4629      	mov	r1, r5
 800338a:	4638      	mov	r0, r7
 800338c:	f7ff ffc0 	bl	8003310 <sbrk_aligned>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	4604      	mov	r4, r0
 8003394:	d155      	bne.n	8003442 <_malloc_r+0xf2>
 8003396:	f8d8 4000 	ldr.w	r4, [r8]
 800339a:	4626      	mov	r6, r4
 800339c:	2e00      	cmp	r6, #0
 800339e:	d145      	bne.n	800342c <_malloc_r+0xdc>
 80033a0:	2c00      	cmp	r4, #0
 80033a2:	d048      	beq.n	8003436 <_malloc_r+0xe6>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	4631      	mov	r1, r6
 80033a8:	4638      	mov	r0, r7
 80033aa:	eb04 0903 	add.w	r9, r4, r3
 80033ae:	f000 fb61 	bl	8003a74 <_sbrk_r>
 80033b2:	4581      	cmp	r9, r0
 80033b4:	d13f      	bne.n	8003436 <_malloc_r+0xe6>
 80033b6:	6821      	ldr	r1, [r4, #0]
 80033b8:	4638      	mov	r0, r7
 80033ba:	1a6d      	subs	r5, r5, r1
 80033bc:	4629      	mov	r1, r5
 80033be:	f7ff ffa7 	bl	8003310 <sbrk_aligned>
 80033c2:	3001      	adds	r0, #1
 80033c4:	d037      	beq.n	8003436 <_malloc_r+0xe6>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	442b      	add	r3, r5
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	f8d8 3000 	ldr.w	r3, [r8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d038      	beq.n	8003446 <_malloc_r+0xf6>
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	42a2      	cmp	r2, r4
 80033d8:	d12b      	bne.n	8003432 <_malloc_r+0xe2>
 80033da:	2200      	movs	r2, #0
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	e00f      	b.n	8003400 <_malloc_r+0xb0>
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	1b52      	subs	r2, r2, r5
 80033e4:	d41f      	bmi.n	8003426 <_malloc_r+0xd6>
 80033e6:	2a0b      	cmp	r2, #11
 80033e8:	d917      	bls.n	800341a <_malloc_r+0xca>
 80033ea:	1961      	adds	r1, r4, r5
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	6025      	str	r5, [r4, #0]
 80033f0:	bf18      	it	ne
 80033f2:	6059      	strne	r1, [r3, #4]
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	bf08      	it	eq
 80033f8:	f8c8 1000 	streq.w	r1, [r8]
 80033fc:	5162      	str	r2, [r4, r5]
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	4638      	mov	r0, r7
 8003402:	f104 060b 	add.w	r6, r4, #11
 8003406:	f000 f829 	bl	800345c <__malloc_unlock>
 800340a:	f026 0607 	bic.w	r6, r6, #7
 800340e:	1d23      	adds	r3, r4, #4
 8003410:	1af2      	subs	r2, r6, r3
 8003412:	d0ae      	beq.n	8003372 <_malloc_r+0x22>
 8003414:	1b9b      	subs	r3, r3, r6
 8003416:	50a3      	str	r3, [r4, r2]
 8003418:	e7ab      	b.n	8003372 <_malloc_r+0x22>
 800341a:	42a3      	cmp	r3, r4
 800341c:	6862      	ldr	r2, [r4, #4]
 800341e:	d1dd      	bne.n	80033dc <_malloc_r+0x8c>
 8003420:	f8c8 2000 	str.w	r2, [r8]
 8003424:	e7ec      	b.n	8003400 <_malloc_r+0xb0>
 8003426:	4623      	mov	r3, r4
 8003428:	6864      	ldr	r4, [r4, #4]
 800342a:	e7ac      	b.n	8003386 <_malloc_r+0x36>
 800342c:	4634      	mov	r4, r6
 800342e:	6876      	ldr	r6, [r6, #4]
 8003430:	e7b4      	b.n	800339c <_malloc_r+0x4c>
 8003432:	4613      	mov	r3, r2
 8003434:	e7cc      	b.n	80033d0 <_malloc_r+0x80>
 8003436:	230c      	movs	r3, #12
 8003438:	4638      	mov	r0, r7
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	f000 f80e 	bl	800345c <__malloc_unlock>
 8003440:	e797      	b.n	8003372 <_malloc_r+0x22>
 8003442:	6025      	str	r5, [r4, #0]
 8003444:	e7dc      	b.n	8003400 <_malloc_r+0xb0>
 8003446:	605b      	str	r3, [r3, #4]
 8003448:	deff      	udf	#255	; 0xff
 800344a:	bf00      	nop
 800344c:	20000244 	.word	0x20000244

08003450 <__malloc_lock>:
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <__malloc_lock+0x8>)
 8003452:	f7ff bf13 	b.w	800327c <__retarget_lock_acquire_recursive>
 8003456:	bf00      	nop
 8003458:	20000240 	.word	0x20000240

0800345c <__malloc_unlock>:
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <__malloc_unlock+0x8>)
 800345e:	f7ff bf0e 	b.w	800327e <__retarget_lock_release_recursive>
 8003462:	bf00      	nop
 8003464:	20000240 	.word	0x20000240

08003468 <__ssputs_r>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	461f      	mov	r7, r3
 800346e:	688e      	ldr	r6, [r1, #8]
 8003470:	4682      	mov	sl, r0
 8003472:	42be      	cmp	r6, r7
 8003474:	460c      	mov	r4, r1
 8003476:	4690      	mov	r8, r2
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	d82c      	bhi.n	80034d6 <__ssputs_r+0x6e>
 800347c:	898a      	ldrh	r2, [r1, #12]
 800347e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003482:	d026      	beq.n	80034d2 <__ssputs_r+0x6a>
 8003484:	6965      	ldr	r5, [r4, #20]
 8003486:	6909      	ldr	r1, [r1, #16]
 8003488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800348c:	eba3 0901 	sub.w	r9, r3, r1
 8003490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003494:	1c7b      	adds	r3, r7, #1
 8003496:	444b      	add	r3, r9
 8003498:	106d      	asrs	r5, r5, #1
 800349a:	429d      	cmp	r5, r3
 800349c:	bf38      	it	cc
 800349e:	461d      	movcc	r5, r3
 80034a0:	0553      	lsls	r3, r2, #21
 80034a2:	d527      	bpl.n	80034f4 <__ssputs_r+0x8c>
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7ff ff53 	bl	8003350 <_malloc_r>
 80034aa:	4606      	mov	r6, r0
 80034ac:	b360      	cbz	r0, 8003508 <__ssputs_r+0xa0>
 80034ae:	464a      	mov	r2, r9
 80034b0:	6921      	ldr	r1, [r4, #16]
 80034b2:	f000 fafd 	bl	8003ab0 <memcpy>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	6126      	str	r6, [r4, #16]
 80034c4:	444e      	add	r6, r9
 80034c6:	6026      	str	r6, [r4, #0]
 80034c8:	463e      	mov	r6, r7
 80034ca:	6165      	str	r5, [r4, #20]
 80034cc:	eba5 0509 	sub.w	r5, r5, r9
 80034d0:	60a5      	str	r5, [r4, #8]
 80034d2:	42be      	cmp	r6, r7
 80034d4:	d900      	bls.n	80034d8 <__ssputs_r+0x70>
 80034d6:	463e      	mov	r6, r7
 80034d8:	4632      	mov	r2, r6
 80034da:	4641      	mov	r1, r8
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	f000 faaf 	bl	8003a40 <memmove>
 80034e2:	2000      	movs	r0, #0
 80034e4:	68a3      	ldr	r3, [r4, #8]
 80034e6:	1b9b      	subs	r3, r3, r6
 80034e8:	60a3      	str	r3, [r4, #8]
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	4433      	add	r3, r6
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f4:	462a      	mov	r2, r5
 80034f6:	f000 fae9 	bl	8003acc <_realloc_r>
 80034fa:	4606      	mov	r6, r0
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d1e0      	bne.n	80034c2 <__ssputs_r+0x5a>
 8003500:	4650      	mov	r0, sl
 8003502:	6921      	ldr	r1, [r4, #16]
 8003504:	f7ff febc 	bl	8003280 <_free_r>
 8003508:	230c      	movs	r3, #12
 800350a:	f8ca 3000 	str.w	r3, [sl]
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	e7e9      	b.n	80034f0 <__ssputs_r+0x88>

0800351c <_svfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	4698      	mov	r8, r3
 8003522:	898b      	ldrh	r3, [r1, #12]
 8003524:	4607      	mov	r7, r0
 8003526:	061b      	lsls	r3, r3, #24
 8003528:	460d      	mov	r5, r1
 800352a:	4614      	mov	r4, r2
 800352c:	b09d      	sub	sp, #116	; 0x74
 800352e:	d50e      	bpl.n	800354e <_svfiprintf_r+0x32>
 8003530:	690b      	ldr	r3, [r1, #16]
 8003532:	b963      	cbnz	r3, 800354e <_svfiprintf_r+0x32>
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	f7ff ff0b 	bl	8003350 <_malloc_r>
 800353a:	6028      	str	r0, [r5, #0]
 800353c:	6128      	str	r0, [r5, #16]
 800353e:	b920      	cbnz	r0, 800354a <_svfiprintf_r+0x2e>
 8003540:	230c      	movs	r3, #12
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	e0d0      	b.n	80036ec <_svfiprintf_r+0x1d0>
 800354a:	2340      	movs	r3, #64	; 0x40
 800354c:	616b      	str	r3, [r5, #20]
 800354e:	2300      	movs	r3, #0
 8003550:	9309      	str	r3, [sp, #36]	; 0x24
 8003552:	2320      	movs	r3, #32
 8003554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003558:	2330      	movs	r3, #48	; 0x30
 800355a:	f04f 0901 	mov.w	r9, #1
 800355e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003562:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003704 <_svfiprintf_r+0x1e8>
 8003566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800356a:	4623      	mov	r3, r4
 800356c:	469a      	mov	sl, r3
 800356e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003572:	b10a      	cbz	r2, 8003578 <_svfiprintf_r+0x5c>
 8003574:	2a25      	cmp	r2, #37	; 0x25
 8003576:	d1f9      	bne.n	800356c <_svfiprintf_r+0x50>
 8003578:	ebba 0b04 	subs.w	fp, sl, r4
 800357c:	d00b      	beq.n	8003596 <_svfiprintf_r+0x7a>
 800357e:	465b      	mov	r3, fp
 8003580:	4622      	mov	r2, r4
 8003582:	4629      	mov	r1, r5
 8003584:	4638      	mov	r0, r7
 8003586:	f7ff ff6f 	bl	8003468 <__ssputs_r>
 800358a:	3001      	adds	r0, #1
 800358c:	f000 80a9 	beq.w	80036e2 <_svfiprintf_r+0x1c6>
 8003590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003592:	445a      	add	r2, fp
 8003594:	9209      	str	r2, [sp, #36]	; 0x24
 8003596:	f89a 3000 	ldrb.w	r3, [sl]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a1 	beq.w	80036e2 <_svfiprintf_r+0x1c6>
 80035a0:	2300      	movs	r3, #0
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295
 80035a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035aa:	f10a 0a01 	add.w	sl, sl, #1
 80035ae:	9304      	str	r3, [sp, #16]
 80035b0:	9307      	str	r3, [sp, #28]
 80035b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035b6:	931a      	str	r3, [sp, #104]	; 0x68
 80035b8:	4654      	mov	r4, sl
 80035ba:	2205      	movs	r2, #5
 80035bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c0:	4850      	ldr	r0, [pc, #320]	; (8003704 <_svfiprintf_r+0x1e8>)
 80035c2:	f000 fa67 	bl	8003a94 <memchr>
 80035c6:	9a04      	ldr	r2, [sp, #16]
 80035c8:	b9d8      	cbnz	r0, 8003602 <_svfiprintf_r+0xe6>
 80035ca:	06d0      	lsls	r0, r2, #27
 80035cc:	bf44      	itt	mi
 80035ce:	2320      	movmi	r3, #32
 80035d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d4:	0711      	lsls	r1, r2, #28
 80035d6:	bf44      	itt	mi
 80035d8:	232b      	movmi	r3, #43	; 0x2b
 80035da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035de:	f89a 3000 	ldrb.w	r3, [sl]
 80035e2:	2b2a      	cmp	r3, #42	; 0x2a
 80035e4:	d015      	beq.n	8003612 <_svfiprintf_r+0xf6>
 80035e6:	4654      	mov	r4, sl
 80035e8:	2000      	movs	r0, #0
 80035ea:	f04f 0c0a 	mov.w	ip, #10
 80035ee:	9a07      	ldr	r2, [sp, #28]
 80035f0:	4621      	mov	r1, r4
 80035f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035f6:	3b30      	subs	r3, #48	; 0x30
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d94d      	bls.n	8003698 <_svfiprintf_r+0x17c>
 80035fc:	b1b0      	cbz	r0, 800362c <_svfiprintf_r+0x110>
 80035fe:	9207      	str	r2, [sp, #28]
 8003600:	e014      	b.n	800362c <_svfiprintf_r+0x110>
 8003602:	eba0 0308 	sub.w	r3, r0, r8
 8003606:	fa09 f303 	lsl.w	r3, r9, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	46a2      	mov	sl, r4
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	e7d2      	b.n	80035b8 <_svfiprintf_r+0x9c>
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	1d19      	adds	r1, r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	9103      	str	r1, [sp, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfbb      	ittet	lt
 800361e:	425b      	neglt	r3, r3
 8003620:	f042 0202 	orrlt.w	r2, r2, #2
 8003624:	9307      	strge	r3, [sp, #28]
 8003626:	9307      	strlt	r3, [sp, #28]
 8003628:	bfb8      	it	lt
 800362a:	9204      	strlt	r2, [sp, #16]
 800362c:	7823      	ldrb	r3, [r4, #0]
 800362e:	2b2e      	cmp	r3, #46	; 0x2e
 8003630:	d10c      	bne.n	800364c <_svfiprintf_r+0x130>
 8003632:	7863      	ldrb	r3, [r4, #1]
 8003634:	2b2a      	cmp	r3, #42	; 0x2a
 8003636:	d134      	bne.n	80036a2 <_svfiprintf_r+0x186>
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	3402      	adds	r4, #2
 800363c:	1d1a      	adds	r2, r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	9203      	str	r2, [sp, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	bfb8      	it	lt
 8003646:	f04f 33ff 	movlt.w	r3, #4294967295
 800364a:	9305      	str	r3, [sp, #20]
 800364c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003708 <_svfiprintf_r+0x1ec>
 8003650:	2203      	movs	r2, #3
 8003652:	4650      	mov	r0, sl
 8003654:	7821      	ldrb	r1, [r4, #0]
 8003656:	f000 fa1d 	bl	8003a94 <memchr>
 800365a:	b138      	cbz	r0, 800366c <_svfiprintf_r+0x150>
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	9b04      	ldr	r3, [sp, #16]
 8003660:	eba0 000a 	sub.w	r0, r0, sl
 8003664:	4082      	lsls	r2, r0
 8003666:	4313      	orrs	r3, r2
 8003668:	3401      	adds	r4, #1
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003670:	2206      	movs	r2, #6
 8003672:	4826      	ldr	r0, [pc, #152]	; (800370c <_svfiprintf_r+0x1f0>)
 8003674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003678:	f000 fa0c 	bl	8003a94 <memchr>
 800367c:	2800      	cmp	r0, #0
 800367e:	d038      	beq.n	80036f2 <_svfiprintf_r+0x1d6>
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <_svfiprintf_r+0x1f4>)
 8003682:	bb1b      	cbnz	r3, 80036cc <_svfiprintf_r+0x1b0>
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	3307      	adds	r3, #7
 8003688:	f023 0307 	bic.w	r3, r3, #7
 800368c:	3308      	adds	r3, #8
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003692:	4433      	add	r3, r6
 8003694:	9309      	str	r3, [sp, #36]	; 0x24
 8003696:	e768      	b.n	800356a <_svfiprintf_r+0x4e>
 8003698:	460c      	mov	r4, r1
 800369a:	2001      	movs	r0, #1
 800369c:	fb0c 3202 	mla	r2, ip, r2, r3
 80036a0:	e7a6      	b.n	80035f0 <_svfiprintf_r+0xd4>
 80036a2:	2300      	movs	r3, #0
 80036a4:	f04f 0c0a 	mov.w	ip, #10
 80036a8:	4619      	mov	r1, r3
 80036aa:	3401      	adds	r4, #1
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	4620      	mov	r0, r4
 80036b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036b4:	3a30      	subs	r2, #48	; 0x30
 80036b6:	2a09      	cmp	r2, #9
 80036b8:	d903      	bls.n	80036c2 <_svfiprintf_r+0x1a6>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0c6      	beq.n	800364c <_svfiprintf_r+0x130>
 80036be:	9105      	str	r1, [sp, #20]
 80036c0:	e7c4      	b.n	800364c <_svfiprintf_r+0x130>
 80036c2:	4604      	mov	r4, r0
 80036c4:	2301      	movs	r3, #1
 80036c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80036ca:	e7f0      	b.n	80036ae <_svfiprintf_r+0x192>
 80036cc:	ab03      	add	r3, sp, #12
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	462a      	mov	r2, r5
 80036d2:	4638      	mov	r0, r7
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <_svfiprintf_r+0x1f8>)
 80036d6:	a904      	add	r1, sp, #16
 80036d8:	f3af 8000 	nop.w
 80036dc:	1c42      	adds	r2, r0, #1
 80036de:	4606      	mov	r6, r0
 80036e0:	d1d6      	bne.n	8003690 <_svfiprintf_r+0x174>
 80036e2:	89ab      	ldrh	r3, [r5, #12]
 80036e4:	065b      	lsls	r3, r3, #25
 80036e6:	f53f af2d 	bmi.w	8003544 <_svfiprintf_r+0x28>
 80036ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ec:	b01d      	add	sp, #116	; 0x74
 80036ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4638      	mov	r0, r7
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <_svfiprintf_r+0x1f8>)
 80036fc:	a904      	add	r1, sp, #16
 80036fe:	f000 f87d 	bl	80037fc <_printf_i>
 8003702:	e7eb      	b.n	80036dc <_svfiprintf_r+0x1c0>
 8003704:	08003b9e 	.word	0x08003b9e
 8003708:	08003ba4 	.word	0x08003ba4
 800370c:	08003ba8 	.word	0x08003ba8
 8003710:	00000000 	.word	0x00000000
 8003714:	08003469 	.word	0x08003469

08003718 <_printf_common>:
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	4616      	mov	r6, r2
 800371e:	4699      	mov	r9, r3
 8003720:	688a      	ldr	r2, [r1, #8]
 8003722:	690b      	ldr	r3, [r1, #16]
 8003724:	4607      	mov	r7, r0
 8003726:	4293      	cmp	r3, r2
 8003728:	bfb8      	it	lt
 800372a:	4613      	movlt	r3, r2
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003732:	460c      	mov	r4, r1
 8003734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003738:	b10a      	cbz	r2, 800373e <_printf_common+0x26>
 800373a:	3301      	adds	r3, #1
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	0699      	lsls	r1, r3, #26
 8003742:	bf42      	ittt	mi
 8003744:	6833      	ldrmi	r3, [r6, #0]
 8003746:	3302      	addmi	r3, #2
 8003748:	6033      	strmi	r3, [r6, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	f015 0506 	ands.w	r5, r5, #6
 8003750:	d106      	bne.n	8003760 <_printf_common+0x48>
 8003752:	f104 0a19 	add.w	sl, r4, #25
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	6832      	ldr	r2, [r6, #0]
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	42ab      	cmp	r3, r5
 800375e:	dc2b      	bgt.n	80037b8 <_printf_common+0xa0>
 8003760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003764:	1e13      	subs	r3, r2, #0
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	2301      	movne	r3, #1
 800376c:	0692      	lsls	r2, r2, #26
 800376e:	d430      	bmi.n	80037d2 <_printf_common+0xba>
 8003770:	4649      	mov	r1, r9
 8003772:	4638      	mov	r0, r7
 8003774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d023      	beq.n	80037c6 <_printf_common+0xae>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf14      	ite	ne
 800378a:	2500      	movne	r5, #0
 800378c:	6833      	ldreq	r3, [r6, #0]
 800378e:	f04f 0600 	mov.w	r6, #0
 8003792:	bf08      	it	eq
 8003794:	68e5      	ldreq	r5, [r4, #12]
 8003796:	f104 041a 	add.w	r4, r4, #26
 800379a:	bf08      	it	eq
 800379c:	1aed      	subeq	r5, r5, r3
 800379e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037a2:	bf08      	it	eq
 80037a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bfc4      	itt	gt
 80037ac:	1a9b      	subgt	r3, r3, r2
 80037ae:	18ed      	addgt	r5, r5, r3
 80037b0:	42b5      	cmp	r5, r6
 80037b2:	d11a      	bne.n	80037ea <_printf_common+0xd2>
 80037b4:	2000      	movs	r0, #0
 80037b6:	e008      	b.n	80037ca <_printf_common+0xb2>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4652      	mov	r2, sl
 80037bc:	4649      	mov	r1, r9
 80037be:	4638      	mov	r0, r7
 80037c0:	47c0      	blx	r8
 80037c2:	3001      	adds	r0, #1
 80037c4:	d103      	bne.n	80037ce <_printf_common+0xb6>
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ce:	3501      	adds	r5, #1
 80037d0:	e7c1      	b.n	8003756 <_printf_common+0x3e>
 80037d2:	2030      	movs	r0, #48	; 0x30
 80037d4:	18e1      	adds	r1, r4, r3
 80037d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037e0:	4422      	add	r2, r4
 80037e2:	3302      	adds	r3, #2
 80037e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037e8:	e7c2      	b.n	8003770 <_printf_common+0x58>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4622      	mov	r2, r4
 80037ee:	4649      	mov	r1, r9
 80037f0:	4638      	mov	r0, r7
 80037f2:	47c0      	blx	r8
 80037f4:	3001      	adds	r0, #1
 80037f6:	d0e6      	beq.n	80037c6 <_printf_common+0xae>
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7d9      	b.n	80037b0 <_printf_common+0x98>

080037fc <_printf_i>:
 80037fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	7e0f      	ldrb	r7, [r1, #24]
 8003802:	4691      	mov	r9, r2
 8003804:	2f78      	cmp	r7, #120	; 0x78
 8003806:	4680      	mov	r8, r0
 8003808:	460c      	mov	r4, r1
 800380a:	469a      	mov	sl, r3
 800380c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800380e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003812:	d807      	bhi.n	8003824 <_printf_i+0x28>
 8003814:	2f62      	cmp	r7, #98	; 0x62
 8003816:	d80a      	bhi.n	800382e <_printf_i+0x32>
 8003818:	2f00      	cmp	r7, #0
 800381a:	f000 80d5 	beq.w	80039c8 <_printf_i+0x1cc>
 800381e:	2f58      	cmp	r7, #88	; 0x58
 8003820:	f000 80c1 	beq.w	80039a6 <_printf_i+0x1aa>
 8003824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800382c:	e03a      	b.n	80038a4 <_printf_i+0xa8>
 800382e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003832:	2b15      	cmp	r3, #21
 8003834:	d8f6      	bhi.n	8003824 <_printf_i+0x28>
 8003836:	a101      	add	r1, pc, #4	; (adr r1, 800383c <_printf_i+0x40>)
 8003838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800383c:	08003895 	.word	0x08003895
 8003840:	080038a9 	.word	0x080038a9
 8003844:	08003825 	.word	0x08003825
 8003848:	08003825 	.word	0x08003825
 800384c:	08003825 	.word	0x08003825
 8003850:	08003825 	.word	0x08003825
 8003854:	080038a9 	.word	0x080038a9
 8003858:	08003825 	.word	0x08003825
 800385c:	08003825 	.word	0x08003825
 8003860:	08003825 	.word	0x08003825
 8003864:	08003825 	.word	0x08003825
 8003868:	080039af 	.word	0x080039af
 800386c:	080038d5 	.word	0x080038d5
 8003870:	08003969 	.word	0x08003969
 8003874:	08003825 	.word	0x08003825
 8003878:	08003825 	.word	0x08003825
 800387c:	080039d1 	.word	0x080039d1
 8003880:	08003825 	.word	0x08003825
 8003884:	080038d5 	.word	0x080038d5
 8003888:	08003825 	.word	0x08003825
 800388c:	08003825 	.word	0x08003825
 8003890:	08003971 	.word	0x08003971
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	602a      	str	r2, [r5, #0]
 800389c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0a0      	b.n	80039ea <_printf_i+0x1ee>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	0607      	lsls	r7, r0, #24
 80038ae:	f103 0104 	add.w	r1, r3, #4
 80038b2:	6029      	str	r1, [r5, #0]
 80038b4:	d501      	bpl.n	80038ba <_printf_i+0xbe>
 80038b6:	681e      	ldr	r6, [r3, #0]
 80038b8:	e003      	b.n	80038c2 <_printf_i+0xc6>
 80038ba:	0646      	lsls	r6, r0, #25
 80038bc:	d5fb      	bpl.n	80038b6 <_printf_i+0xba>
 80038be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038c2:	2e00      	cmp	r6, #0
 80038c4:	da03      	bge.n	80038ce <_printf_i+0xd2>
 80038c6:	232d      	movs	r3, #45	; 0x2d
 80038c8:	4276      	negs	r6, r6
 80038ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ce:	230a      	movs	r3, #10
 80038d0:	4859      	ldr	r0, [pc, #356]	; (8003a38 <_printf_i+0x23c>)
 80038d2:	e012      	b.n	80038fa <_printf_i+0xfe>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	6029      	str	r1, [r5, #0]
 80038dc:	0605      	lsls	r5, r0, #24
 80038de:	d501      	bpl.n	80038e4 <_printf_i+0xe8>
 80038e0:	681e      	ldr	r6, [r3, #0]
 80038e2:	e002      	b.n	80038ea <_printf_i+0xee>
 80038e4:	0641      	lsls	r1, r0, #25
 80038e6:	d5fb      	bpl.n	80038e0 <_printf_i+0xe4>
 80038e8:	881e      	ldrh	r6, [r3, #0]
 80038ea:	2f6f      	cmp	r7, #111	; 0x6f
 80038ec:	bf0c      	ite	eq
 80038ee:	2308      	moveq	r3, #8
 80038f0:	230a      	movne	r3, #10
 80038f2:	4851      	ldr	r0, [pc, #324]	; (8003a38 <_printf_i+0x23c>)
 80038f4:	2100      	movs	r1, #0
 80038f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038fa:	6865      	ldr	r5, [r4, #4]
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	bfa8      	it	ge
 8003900:	6821      	ldrge	r1, [r4, #0]
 8003902:	60a5      	str	r5, [r4, #8]
 8003904:	bfa4      	itt	ge
 8003906:	f021 0104 	bicge.w	r1, r1, #4
 800390a:	6021      	strge	r1, [r4, #0]
 800390c:	b90e      	cbnz	r6, 8003912 <_printf_i+0x116>
 800390e:	2d00      	cmp	r5, #0
 8003910:	d04b      	beq.n	80039aa <_printf_i+0x1ae>
 8003912:	4615      	mov	r5, r2
 8003914:	fbb6 f1f3 	udiv	r1, r6, r3
 8003918:	fb03 6711 	mls	r7, r3, r1, r6
 800391c:	5dc7      	ldrb	r7, [r0, r7]
 800391e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003922:	4637      	mov	r7, r6
 8003924:	42bb      	cmp	r3, r7
 8003926:	460e      	mov	r6, r1
 8003928:	d9f4      	bls.n	8003914 <_printf_i+0x118>
 800392a:	2b08      	cmp	r3, #8
 800392c:	d10b      	bne.n	8003946 <_printf_i+0x14a>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	07de      	lsls	r6, r3, #31
 8003932:	d508      	bpl.n	8003946 <_printf_i+0x14a>
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	6861      	ldr	r1, [r4, #4]
 8003938:	4299      	cmp	r1, r3
 800393a:	bfde      	ittt	le
 800393c:	2330      	movle	r3, #48	; 0x30
 800393e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003942:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003946:	1b52      	subs	r2, r2, r5
 8003948:	6122      	str	r2, [r4, #16]
 800394a:	464b      	mov	r3, r9
 800394c:	4621      	mov	r1, r4
 800394e:	4640      	mov	r0, r8
 8003950:	f8cd a000 	str.w	sl, [sp]
 8003954:	aa03      	add	r2, sp, #12
 8003956:	f7ff fedf 	bl	8003718 <_printf_common>
 800395a:	3001      	adds	r0, #1
 800395c:	d14a      	bne.n	80039f4 <_printf_i+0x1f8>
 800395e:	f04f 30ff 	mov.w	r0, #4294967295
 8003962:	b004      	add	sp, #16
 8003964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	2778      	movs	r7, #120	; 0x78
 8003972:	4832      	ldr	r0, [pc, #200]	; (8003a3c <_printf_i+0x240>)
 8003974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	6829      	ldr	r1, [r5, #0]
 800397c:	061f      	lsls	r7, r3, #24
 800397e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003982:	d402      	bmi.n	800398a <_printf_i+0x18e>
 8003984:	065f      	lsls	r7, r3, #25
 8003986:	bf48      	it	mi
 8003988:	b2b6      	uxthmi	r6, r6
 800398a:	07df      	lsls	r7, r3, #31
 800398c:	bf48      	it	mi
 800398e:	f043 0320 	orrmi.w	r3, r3, #32
 8003992:	6029      	str	r1, [r5, #0]
 8003994:	bf48      	it	mi
 8003996:	6023      	strmi	r3, [r4, #0]
 8003998:	b91e      	cbnz	r6, 80039a2 <_printf_i+0x1a6>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f023 0320 	bic.w	r3, r3, #32
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	2310      	movs	r3, #16
 80039a4:	e7a6      	b.n	80038f4 <_printf_i+0xf8>
 80039a6:	4824      	ldr	r0, [pc, #144]	; (8003a38 <_printf_i+0x23c>)
 80039a8:	e7e4      	b.n	8003974 <_printf_i+0x178>
 80039aa:	4615      	mov	r5, r2
 80039ac:	e7bd      	b.n	800392a <_printf_i+0x12e>
 80039ae:	682b      	ldr	r3, [r5, #0]
 80039b0:	6826      	ldr	r6, [r4, #0]
 80039b2:	1d18      	adds	r0, r3, #4
 80039b4:	6961      	ldr	r1, [r4, #20]
 80039b6:	6028      	str	r0, [r5, #0]
 80039b8:	0635      	lsls	r5, r6, #24
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	d501      	bpl.n	80039c2 <_printf_i+0x1c6>
 80039be:	6019      	str	r1, [r3, #0]
 80039c0:	e002      	b.n	80039c8 <_printf_i+0x1cc>
 80039c2:	0670      	lsls	r0, r6, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0x1c2>
 80039c6:	8019      	strh	r1, [r3, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	4615      	mov	r5, r2
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	e7bc      	b.n	800394a <_printf_i+0x14e>
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	2100      	movs	r1, #0
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	602a      	str	r2, [r5, #0]
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	4628      	mov	r0, r5
 80039de:	f000 f859 	bl	8003a94 <memchr>
 80039e2:	b108      	cbz	r0, 80039e8 <_printf_i+0x1ec>
 80039e4:	1b40      	subs	r0, r0, r5
 80039e6:	6060      	str	r0, [r4, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f2:	e7aa      	b.n	800394a <_printf_i+0x14e>
 80039f4:	462a      	mov	r2, r5
 80039f6:	4649      	mov	r1, r9
 80039f8:	4640      	mov	r0, r8
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	47d0      	blx	sl
 80039fe:	3001      	adds	r0, #1
 8003a00:	d0ad      	beq.n	800395e <_printf_i+0x162>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	079b      	lsls	r3, r3, #30
 8003a06:	d413      	bmi.n	8003a30 <_printf_i+0x234>
 8003a08:	68e0      	ldr	r0, [r4, #12]
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	4298      	cmp	r0, r3
 8003a0e:	bfb8      	it	lt
 8003a10:	4618      	movlt	r0, r3
 8003a12:	e7a6      	b.n	8003962 <_printf_i+0x166>
 8003a14:	2301      	movs	r3, #1
 8003a16:	4632      	mov	r2, r6
 8003a18:	4649      	mov	r1, r9
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	47d0      	blx	sl
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d09d      	beq.n	800395e <_printf_i+0x162>
 8003a22:	3501      	adds	r5, #1
 8003a24:	68e3      	ldr	r3, [r4, #12]
 8003a26:	9903      	ldr	r1, [sp, #12]
 8003a28:	1a5b      	subs	r3, r3, r1
 8003a2a:	42ab      	cmp	r3, r5
 8003a2c:	dcf2      	bgt.n	8003a14 <_printf_i+0x218>
 8003a2e:	e7eb      	b.n	8003a08 <_printf_i+0x20c>
 8003a30:	2500      	movs	r5, #0
 8003a32:	f104 0619 	add.w	r6, r4, #25
 8003a36:	e7f5      	b.n	8003a24 <_printf_i+0x228>
 8003a38:	08003baf 	.word	0x08003baf
 8003a3c:	08003bc0 	.word	0x08003bc0

08003a40 <memmove>:
 8003a40:	4288      	cmp	r0, r1
 8003a42:	b510      	push	{r4, lr}
 8003a44:	eb01 0402 	add.w	r4, r1, r2
 8003a48:	d902      	bls.n	8003a50 <memmove+0x10>
 8003a4a:	4284      	cmp	r4, r0
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	d807      	bhi.n	8003a60 <memmove+0x20>
 8003a50:	1e43      	subs	r3, r0, #1
 8003a52:	42a1      	cmp	r1, r4
 8003a54:	d008      	beq.n	8003a68 <memmove+0x28>
 8003a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a5e:	e7f8      	b.n	8003a52 <memmove+0x12>
 8003a60:	4601      	mov	r1, r0
 8003a62:	4402      	add	r2, r0
 8003a64:	428a      	cmp	r2, r1
 8003a66:	d100      	bne.n	8003a6a <memmove+0x2a>
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a72:	e7f7      	b.n	8003a64 <memmove+0x24>

08003a74 <_sbrk_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	2300      	movs	r3, #0
 8003a78:	4d05      	ldr	r5, [pc, #20]	; (8003a90 <_sbrk_r+0x1c>)
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fd fbe8 	bl	8001254 <_sbrk>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_sbrk_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_sbrk_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	2000023c 	.word	0x2000023c

08003a94 <memchr>:
 8003a94:	4603      	mov	r3, r0
 8003a96:	b510      	push	{r4, lr}
 8003a98:	b2c9      	uxtb	r1, r1
 8003a9a:	4402      	add	r2, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	d101      	bne.n	8003aa6 <memchr+0x12>
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e003      	b.n	8003aae <memchr+0x1a>
 8003aa6:	7804      	ldrb	r4, [r0, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	428c      	cmp	r4, r1
 8003aac:	d1f6      	bne.n	8003a9c <memchr+0x8>
 8003aae:	bd10      	pop	{r4, pc}

08003ab0 <memcpy>:
 8003ab0:	440a      	add	r2, r1
 8003ab2:	4291      	cmp	r1, r2
 8003ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ab8:	d100      	bne.n	8003abc <memcpy+0xc>
 8003aba:	4770      	bx	lr
 8003abc:	b510      	push	{r4, lr}
 8003abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac2:	4291      	cmp	r1, r2
 8003ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ac8:	d1f9      	bne.n	8003abe <memcpy+0xe>
 8003aca:	bd10      	pop	{r4, pc}

08003acc <_realloc_r>:
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad0:	4680      	mov	r8, r0
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	b921      	cbnz	r1, 8003ae2 <_realloc_r+0x16>
 8003ad8:	4611      	mov	r1, r2
 8003ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	f7ff bc37 	b.w	8003350 <_malloc_r>
 8003ae2:	b92a      	cbnz	r2, 8003af0 <_realloc_r+0x24>
 8003ae4:	f7ff fbcc 	bl	8003280 <_free_r>
 8003ae8:	4625      	mov	r5, r4
 8003aea:	4628      	mov	r0, r5
 8003aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af0:	f000 f81b 	bl	8003b2a <_malloc_usable_size_r>
 8003af4:	4284      	cmp	r4, r0
 8003af6:	4607      	mov	r7, r0
 8003af8:	d802      	bhi.n	8003b00 <_realloc_r+0x34>
 8003afa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003afe:	d812      	bhi.n	8003b26 <_realloc_r+0x5a>
 8003b00:	4621      	mov	r1, r4
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7ff fc24 	bl	8003350 <_malloc_r>
 8003b08:	4605      	mov	r5, r0
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0ed      	beq.n	8003aea <_realloc_r+0x1e>
 8003b0e:	42bc      	cmp	r4, r7
 8003b10:	4622      	mov	r2, r4
 8003b12:	4631      	mov	r1, r6
 8003b14:	bf28      	it	cs
 8003b16:	463a      	movcs	r2, r7
 8003b18:	f7ff ffca 	bl	8003ab0 <memcpy>
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4640      	mov	r0, r8
 8003b20:	f7ff fbae 	bl	8003280 <_free_r>
 8003b24:	e7e1      	b.n	8003aea <_realloc_r+0x1e>
 8003b26:	4635      	mov	r5, r6
 8003b28:	e7df      	b.n	8003aea <_realloc_r+0x1e>

08003b2a <_malloc_usable_size_r>:
 8003b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2e:	1f18      	subs	r0, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bfbc      	itt	lt
 8003b34:	580b      	ldrlt	r3, [r1, r0]
 8003b36:	18c0      	addlt	r0, r0, r3
 8003b38:	4770      	bx	lr
	...

08003b3c <_init>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

08003b48 <_fini>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr
